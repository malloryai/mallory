from google.cloud import firestore

from typing import List
from pydantic import Field

# config 
from config.config import Config

from lib.news_analysis_result import NewsAnalysisResult
from lib.analyst.prompts import *

class MalwareNewsAnalysisResult(NewsAnalysisResult):
    malware_categories: List[str] = Field(description="list of malware categories that are referenced in the article.")
    malware_names: List[str] = Field(description="list of specific malware names that are referenced in the article.")
    threat_names: List[str] = Field(description="list of specific threat names that are referenced in the article.")
    reporters: List[str] = Field(description="Name of the parties that identified the malware or threat activity being discussed.")
    target_organizations: List[str] = Field(description="list of specific orgnaization or industry names that are targeted by this malware.")
    target_platforms: List[str] = Field(description="list of target platforms or software that this malware targets.")

    def persist(self):
        db = firestore.Client(database=Config.MALLORY_DATABASE_NAME)
        print("Persisting as malware_news_analysis ", self.hashed_url)
        doc_ref = db.collection(u'malware_news_analysis').document(self.hashed_url)
        doc_ref.set({
            u'analysis_type': self.analysis_type,
            u'url': self.url,
            u'hashed_url': self.hashed_url,
            u'source': self.source,
            u'event_synopsis': self.event_synopsis,
            u'related_articles': self.related_articles,
            u'malware_names': self.malware_names,
            u'threat_names': self.threat_names,
            u'reporter': self.reporter,
            u'target_organizations': self.target_organizations,
            u'target_platforms': self.target_platforms
        })


class MalwareNewsAnalyst:

    @staticmethod
    def generate_prompt(url: str, content: str) -> str:
        text = f"""{Prompts.prepend_prompt(url)}
         
            ACTIONS
             - Ignore the analysis_type, url, hashed_url and source fields. 
             - Store any referenced links in the related_articles field in the JSON output.
             - Perform a summary of the content and store it in the output event_synopsys field in the JSON output. The value should be a paragraph. no more than 5 sentences.
             - Return false for any boolean field you don't have an answer for. 
             - Return "" for any string field you don't have an answer for. 
             - Return [] for any list field you don't have an answer for. 

            QUESTIONS
            - List the category of malware discussed. Is this a stealer, a RAT, phishing kit or other kind of malware, store in malware_categories field.
            - List the specific malware names that are discussed, including aliases, store in malware_names field. 
            - List malware operator or author if it's mentioned, including aliases. store in threat_names field.
            - List the person or organizations that identified any malicious activity. Store this in the 'reporter' field. 
            - List target organizations or industries where this malware was deployed. Store this in the target_organizations field.
            - List target platforms or software (i.e. linux, unix, windows xp, microsoft exchange), store in target_platforms field.

            {Prompts.append_prompt(content)}"""
            
        return text 
    