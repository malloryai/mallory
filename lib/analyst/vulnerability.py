
from google.cloud import firestore

from typing import List
from pydantic import Field

# config 
from config.config import Config

from lib.news_analysis_result import NewsAnalysisResult
from lib.analyst.prompts import *

class VulnerabilityNewsAnalysisResult(NewsAnalysisResult):
    vulnerability_names: List[str] = Field(description="vulnerablity names or monikers")
    cve_ids: List[str] = Field(description="list of Common Vulnerabilities and Exposures (CVE) IDs associated with the event")
    reporters: List[str] = Field(description="list of names of reporters of vulnerability")
    software_packages: List[str] = Field(description="the software packages that are being exploited")
    exploited_in_the_wild: bool = Field(description="true if this vulnerability is known to be exploited in the wild, false if not")
    patches_exist: bool = Field(description="true if patches exist for this vulnerability, false if not")
    mitigations_exist: bool = Field(description="true if a mitigation exists for this vulnerability, false if not")

    def persist(self):
        db = firestore.Client(database=Config.MALLORY_DATABASE_NAME)
        print("Persisting as vulnerability_news_analysis ", self.hashed_url)
        doc_ref = db.collection(u'vulnerability_news_analysis').document(self.hashed_url)
        doc_ref.set({
            u'analysis_type': self.analysis_type,
            u'url': self.url,
            u'hashed_url': self.hashed_url,
            u'source': self.source,
            u'event_synopsis': self.event_synopsis,
            u'related_articles': self.related_articles,
            u'vulnerability_names': self.vulnerability_names,
            u'cve_ids': self.cve_ids,
            u'reporters': self.reporters,
            u'software_packages': self.software_packages,
            u'exploited_in_the_wild': self.exploited_in_the_wild,
            u'patches_exist': self.patches_exist,
            u'mitigations_exist': self.mitigations_exist
        })


class VulnerabilityNewsAnalyst:
    @staticmethod
    def generate_prompt(url: str, content: str) -> str:
        prompt = f"""{Prompts.prepend_prompt(url)}

            ACTIONS
             - Ignore the analysis_type, url, hashed_url and source fields. 
             - Store any referenced links in the related_articles field in the JSON output.
             - Perform a summary of the content and store it in the output event_synopsys field in the JSON output. The value should be a paragraph. no more than 5 sentences.
             - Return false for any boolean field you don't have an answer for. 
             - Return "" for any string field you don't have an answer for. 
             - Return [] for any list field you don't have an answer for. 

            QUESTIONS
            - List any common names for the discussed vulnerabilites. For example, shellshock, heartbleed, etc. 
            - List any cves that this article discusses. Be complete and include any CVE that matches the format of a CVE (CVE-YYYY-*).
            - List the reporters of these CVEs. This could be a company or an individual. 
            - List software packages that this article describes as targeted. Include vendor, product name, and any version information. Ensure each software package is separated into individual items.
            - Has this vulnerability been exploited in the wild, by a threat actor? If so, mark the exploited_in_the_wild field as true.
            - Do patches exist for this vulnerability? IF so, mark patches_exist as true. 
            - Do mitigations exist for this vulnerability? IF so, mark mitigations_exist as true. 
            
            {Prompts.append_prompt(content)}"""
        
        return prompt 